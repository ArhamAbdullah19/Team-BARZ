/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/7a5b4310-5ac7-42f8-a4ce-bb9576655778 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  int flameSensor;
  int sensorValue;
  bool buzzer;
  bool flame;
  bool smoke;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
int Led = LED_BUILTIN; //define LED pin
int Button = D1; //define push button pin
int val; //define digital variable val
int sensorPin = A0; // analog input pin
int ledPin = D3; // of the onboard LED
//int sensorValue = 0; // varialbe that stores the LDR sensor value

#include "pitches.h"

// Define the pins
const int BuzzerPin = D2;
const int FlameSensorPin = D4; // The flame sensor is also connected to D1
const int LedPin = LED_BUILTIN;
#define FLAME_THRESHOLD 300   // Adjust this threshold according to your sensor and environment


// Define the melody notes and duration
int melody[] = {
  NOTE_C4, NOTE_G4, NOTE_G4, NOTE_A4, NOTE_G4, NOTE_G4, NOTE_A4, NOTE_G4, NOTE_B4, NOTE_C5
};
int duration = 500; // Duration of each note (in milliseconds)


void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

  pinMode(Led, OUTPUT); //set the LED pin as an output pin
  pinMode(Button, INPUT); //set the button pin as an input pin
  pinMode(ledPin, OUTPUT);
  pinMode(BuzzerPin, OUTPUT);
  pinMode(LedPin, OUTPUT);

  // Initialize the flame sensor pin as an input
  pinMode(FlameSensorPin, INPUT);

}

void loop() {
  ArduinoCloud.update();
  // Your code here 
  
  sensorValue = analogRead(sensorPin);
  if (sensorValue > 900)
  {
    digitalWrite(ledPin, LOW);
    Serial.println("The smoke is too dark. Check Engine Combustion parameters!");
    smoke=1;
  }
  else
  {
    digitalWrite(ledPin, HIGH);
    smoke=0;
  }
  Serial.println(sensorValue, DEC);
  val = digitalRead(Button);//we read the state of the button
  if (val == LOW) //if the button is pressed, we turn on the LED
  {
    digitalWrite(Led, HIGH);
    Serial.println("ALARM ACKNOWLEDGED!");
    
  }
  else
  {
    digitalWrite(Led, LOW);
  }
  flameSensor = analogRead(FlameSensorPin); //read the sensor digital output

  // Process the data and determine if flame is detected

  int Flame = flameSensor > FLAME_THRESHOLD;

  // Activate the buzzer if a flame is detected
  if (Flame) {
    buzzer = true;
    digitalWrite(LedPin, LOW);
    Serial.println("FIRE IN THE ENGINE ROOM!!!!!!!!");
    for (int thisNote = 0; thisNote < 8; thisNote++) {
      tone(BuzzerPin, melody[thisNote], duration);
      
    }

  } else {
    // Turn off the buzzer and Led
    digitalWrite(LedPin, HIGH);
    noTone(BuzzerPin);
    Serial.println("NO FIRE");
    buzzer = false;
  }



  
}





