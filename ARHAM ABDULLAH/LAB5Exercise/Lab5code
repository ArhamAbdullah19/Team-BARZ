/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/72b6f3dd-d43a-4df3-ac56-c526b2f481d0 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  int cooling_water_flowrate;
  CloudLength vibX;
  CloudLength vibY;
  CloudLength vibZ;
  CloudTemperature temperature;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include <OneWire.h>
#include <DallasTemperature.h>

// Data wire is plugged into D5 on the ESP8266
#define ONE_WIRE_BUS D5

// A OneWire instance is created to communicate with the sensor
OneWire oneWire(ONE_WIRE_BUS);

// We connect the OneWire bus with the temperature sensor.
DallasTemperature sensors(&oneWire);


#include<Wire.h>
const int MPU_addr=0x68;  // I2C address of the MPU-6050
int16_t AcX,AcY,AcZ,Tmp,GyX,GyY,GyZ,Acx,Acy,Acz;



void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
  sensors.begin();
  
  Wire.begin();
  Wire.beginTransmission(MPU_addr);
  Wire.write(0x6B);  // PWR_MGMT_1 register
  Wire.write(0);     // set to zero (wakes up the MPU-6050)
  Wire.endTransmission(true);
  
  
}

void loop() {
  ArduinoCloud.update();
  // Your code here 
  delay(100);
Serial.print("Requesting temperature...");
sensors.requestTemperatures(); // Send the command to get the temperature Serial.println("DONE");
Serial.print("Temperaturel is: ");
Serial.println(sensors.getTempCByIndex(0));
  temperature=sensors.getTempCByIndex(0);
    if (temperature < 20) {
    // If temperature is below 25 degrees Celsius, output 50
    cooling_water_flowrate=50;
  } else if (temperature >= 20 && temperature <= 100) {
    // If temperature is between 25 and 100 degrees Celsius, linearly scale the output
    int outputValue = map(temperature, 20, 100, 50, 100);
    cooling_water_flowrate= outputValue;
  } else {
    // If temperature exceeds 100 degrees Celsius, output 100
    cooling_water_flowrate= 100;
  }
    Wire.beginTransmission(MPU_addr);
  Wire.write(0x3B);  // starting with register 0x3B (ACCEL_XOUT_H)
  Wire.endTransmission(false);
  Wire.requestFrom(MPU_addr,14,true);  // request a total of 14 registers
  AcX=Wire.read()<<8|Wire.read();  // 0x3B (ACCEL_XOUT_H) & 0x3C (ACCEL_XOUT_L)    
  AcY=Wire.read()<<8|Wire.read();  // 0x3D (ACCEL_YOUT_H) & 0x3E (ACCEL_YOUT_L)
  AcZ=Wire.read()<<16|Wire.read();
  Tmp=Wire.read()<<8|Wire.read();  // 0x41 (TEMP_OUT_H) & 0x42 (TEMP_OUT_L)
  GyX=Wire.read()<<8|Wire.read();  // 0x43 (GYRO_XOUT_H) & 0x44 (GYRO_XOUT_L)
  GyY=Wire.read()<<8|Wire.read();  // 0x45 (GYRO_YOUT_H) & 0x46 (GYRO_YOUT_L)
  GyZ=Wire.read()<<8|Wire.read();  // 0x47 (GYRO_ZOUT_H) & 0x48 (GYRO_ZOUT_L)
  
  Acx=AcX/16384.00*9.81;
  Acy=AcY/2048.00*9.81;
  Acz=AcZ/16384.00*9.81;
  vibX=Acx*0.04;
  vibY=Acy*0.04;
  vibZ=Acz*0.04;
  

 Serial.print("vibration in X direction="); Serial.println(vibX);
 Serial.print("vibration in Y direction="); Serial.println(vibY);
 Serial.print("vibration in Z direction="); Serial.println(vibZ);

  delay(100);
  
  
}






/*
  Since Acy is READ_WRITE variable, onAcyChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onAcyChange()  {
  // Add your code here to act upon Acy change
}

/*
  Since Acz is READ_WRITE variable, onAczChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onAczChange()  {
  // Add your code here to act upon Acz change
}











